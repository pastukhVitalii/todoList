{"version":3,"sources":["common/Button/Button.tsx","TodoListTasks/TodoListTask/TodoListTask.tsx","TodoListTasks/TodoListTasks.tsx","TodoListFooter/TodoListFooter.tsx","TodoListHeader/TodoListTitle.tsx","TodoListHeader/AddNewItemForm.tsx","api/api.ts","todolistReducer.ts","TodoList.tsx","App.tsx","serviceWorker.js","store.ts","index.js"],"names":["Button","props","small","className","type","onClick","btnName","TodoListTask","state","editMode","title","task","onIsDoneChanged","e","status","currentTarget","checked","changeStatus","id","onTitleChanged","setState","value","activateEditMode","deactivateEditMode","changeTitle","onDeleteTask","deleteTask","onPriorityChange","event","changePriority","render","containerCssClass","priority","onChange","onBlur","autoFocus","React","Component","TodoListTasks","tasksElements","tasks","map","key","loadingTasks","length","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTitle","onDelete","deleteTodolist","todolistId","updateTodolist","defaultValue","name","AddNewItemForm","error","onAddItemClick","newText","trim","addItem","onKeyPress","classNameForInput","placeholder","instance","axios","create","baseURL","withCredentials","headers","api","post","then","res","data","put","get","delete","taskId","CREATE_TODOLIST","ADD_TASK","UPDATE_TASK","DELETE_TODOLIST","DELETE_TASK","SET_TODOLIST","SET_TASKS","LOADING_TODO","LOADING_TASKS","initialState","todolists","loadingTodo","todolistReducer","action","newTodolist","tl","newTask","t","obj","filter","isActive","loadingTodoAC","loadingTasksAC","TodoList","deleteTodolistTC","updateTodolistTC","addTask","addTaskTC","newFilterValue","changeTask","changedTask","find","updateTaskTC","deleteTaskTC","tasksFilter","this","setTaskTC","ConnectedTodoList","connect","dispatch","setTasksAC","items","deleteTodolistAC","resultCode","updateTodolistAC","addTaskAC","item","updateTaskAC","deleteTaskAC","App","addTodoList","addTodolistTC","restoreState","setTodolistsTC","todolist","ConnectedApp","addTodolistAC","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.62f30de8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Button.css';\r\n\r\ntype OwnPropTypes = {\r\n    btnName: string\r\n    type: string\r\n    disable?: boolean\r\n    small?: boolean\r\n    active? : string\r\n    onClick: () => void\r\n}\r\nconst Button = (props: OwnPropTypes) => {\r\n    let small = props.small? 'small': '';\r\n    return (\r\n        <button className={`button + ${props.type} + ${small}`} onClick={props.onClick}> {props.btnName}</button>\r\n    )\r\n}\r\n\r\nexport default Button;\r\n","import React, {ChangeEvent} from \"react\";\r\nimport {TaskType} from \"../../types/entities\";\r\nimport Button from \"../../common/Button/Button\";\r\nimport '../../TodoList.css';\r\n\r\ntype StateType = {\r\n    editMode: boolean\r\n    title: string\r\n}\r\n\r\ntype OwnPropsType = {\r\n    changeStatus: (id: string, status: number) => void\r\n    changeTitle: (id: string, title: string) => void\r\n    changePriority: (id: string, priority: number) => void\r\n    deleteTask: (id: string) => void\r\n    task: TaskType\r\n}\r\n\r\nclass TodoListTask extends React.Component<OwnPropsType, StateType> {\r\n\r\n    state: StateType = {\r\n        editMode: false,\r\n        title: this.props.task.title\r\n    };\r\n\r\n    onIsDoneChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let status = e.currentTarget.checked ? 2 : 0;\r\n        this.props.changeStatus(this.props.task.id, status);\r\n    };\r\n\r\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({title: e.currentTarget.value});\r\n    };\r\n\r\n    activateEditMode = (e: React.MouseEvent<HTMLElement>) => {\r\n        this.setState({editMode: true});\r\n    };\r\n\r\n    deactivateEditMode = (e: React.FocusEvent<HTMLInputElement>) => {\r\n        this.props.changeTitle(this.props.task.id, this.state.title);\r\n        this.setState({editMode: false});\r\n    };\r\n\r\n    onDeleteTask = () => {\r\n        this.props.deleteTask(this.props.task.id);\r\n    };\r\n\r\n    onPriorityChange = (event: ChangeEvent<HTMLSelectElement>) => {\r\n        this.props.changePriority(this.props.task.id, +event.currentTarget.value)\r\n    };\r\n\r\n    render = () => {\r\n        let containerCssClass = this.props.task.status ? \" done\" : \"\";\r\n        let priotityTitle = \"\";\r\n        switch (this.props.task.priority) {\r\n            case 0:\r\n                priotityTitle = \"Low\";\r\n                break;\r\n            case 1:\r\n                priotityTitle = \"Middle\";\r\n                break;\r\n            case 2:\r\n                priotityTitle = \"High\";\r\n                break;\r\n            case 3:\r\n                priotityTitle = \"Urgently\";\r\n                break;\r\n            case 4:\r\n                priotityTitle = \"Later\";\r\n                break;\r\n        }\r\n        return (\r\n            <div className={'todoList-task'}>\r\n                <div className={containerCssClass}>\r\n                    <input className={'checkBox'} type=\"checkbox\"\r\n                           checked={this.props.task.status === 2}\r\n                           onChange={this.onIsDoneChanged}/>\r\n                    {this.state.editMode\r\n                        ? <input onBlur={this.deactivateEditMode}\r\n                                 onChange={this.onTitleChanged}\r\n                                 autoFocus={true}\r\n                                 value={this.state.title}/>\r\n                        : <span onClick={this.activateEditMode}>{this.props.task.title}</span>\r\n                    }, <b>priority:</b>\r\n                    <select className={'select'} value={this.props.task.priority} onChange={this.onPriorityChange}>\r\n                        <option value='2'>High</option>\r\n                        <option value='1'>Middle</option>\r\n                        <option value='0'>Low</option>\r\n                    </select>\r\n                </div>\r\n                <Button type={'delete'} onClick={this.onDeleteTask} btnName={'x'}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTask;","import React from \"react\";\r\nimport TodoListTask from \"./TodoListTask/TodoListTask\";\r\nimport {TaskType} from \"../types/entities\";\r\nimport '../TodoList.css'\r\n\r\ntype OwnPropsType = {\r\n    tasks: Array<TaskType>\r\n    changeStatus: (id: string, status: number) => void\r\n    changeTitle: (id: string, title: string) => void\r\n    changePriority: (id: string, priority: number) => void\r\n    deleteTask: (id: string) => void\r\n    loadingTasks: boolean\r\n}\r\nclass TodoListTasks extends React.Component<OwnPropsType> {\r\n  render = () => {\r\n    let tasksElements = this.props.tasks.map(task => {\r\n      return (\r\n        <TodoListTask\r\n          task={task}\r\n          changeStatus={this.props.changeStatus}\r\n          changeTitle={this.props.changeTitle}\r\n          changePriority={this.props.changePriority}\r\n          key={task.id}\r\n          deleteTask={this.props.deleteTask}\r\n        />\r\n      )\r\n    });\r\n    return (\r\n      <div className=\"todoList-tasks\">\r\n          {this.props.loadingTasks?<div>Loading...</div> : tasksElements}\r\n          {this.props.tasks.length === 0 && !this.props.loadingTasks? <div>Hey create a new tasks</div>:  <span></span> }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TodoListTasks;","import React from \"react\";\r\nimport '../TodoList.css';\r\nimport Button from \"../common/Button/Button\";\r\n\r\ntype StateType = {\r\n    isHidden: boolean\r\n}\r\n\r\ntype OwnPropsType = {\r\n    changeFilter: (newFilterValue: string) => void\r\n    filterValue: string\r\n}\r\n\r\nclass TodoListFooter extends React.Component<OwnPropsType, StateType> {\r\n    state: StateType = {\r\n        isHidden: false\r\n    }\r\n\r\n    onAllFilterClick = () => {\r\n        this.props.changeFilter('All')\r\n    }\r\n    onCompletedFilterClick = () => {\r\n        this.props.changeFilter('Completed')\r\n    }\r\n    onActiveFilterClick = () => {\r\n        this.props.changeFilter('Active')\r\n    }\r\n    onShowFiltersClick = (event: React.MouseEvent<HTMLSpanElement>) => {\r\n        this.setState({isHidden: true})\r\n    }\r\n    onHideFiltersClick = (event: React.MouseEvent<HTMLSpanElement>) => {\r\n        this.setState({isHidden: false})\r\n    }\r\n\r\n    render = () => {\r\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\r\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\r\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\r\n        return (\r\n            <>\r\n                <div className={\"todoList-footer-btn\"}>\r\n                    {!this.state.isHidden && <>\r\n                        <Button type={`primary + ${classForAll}`} small={true} onClick={this.onAllFilterClick}\r\n                                btnName={'All'}/>\r\n                        <Button type={`primary + ${classForCompleted}`} small={true}\r\n                                onClick={this.onCompletedFilterClick}\r\n                                btnName={'Completed'}/>\r\n                        <Button type={`primary + ${classForActive}`} small={true} onClick={this.onActiveFilterClick}\r\n                                btnName={'Active'}/>\r\n                    </>}\r\n                </div>\r\n                <div className={'todoList-footer-filter'}>{!this.state.isHidden && <span onClick={this.onShowFiltersClick}>Hide filter </span>}\r\n                    {this.state.isHidden && <span onClick={this.onHideFiltersClick}>Show filter </span>}</div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoListFooter;\r\n/*\r\n\r\n` ${class1} ${this.isDone && class2}`\r\n  ` ${class1} text ${this.isDone && class2}`\r\n*/\r\n","import React, {ChangeEvent} from \"react\";\r\nimport '../TodoList.css'\r\nimport Button from \"../common/Button/Button\";\r\n\r\ntype StateType = {\r\n    editMode: boolean,\r\n    title: string\r\n}\r\n\r\ntype OwnPropsType = {\r\n    title: string\r\n    todolistId: string\r\n    deleteTodolist: (todolistId: string) => void\r\n    updateTodolist: (title: string) => void\r\n    name: string\r\n}\r\n\r\nclass TodoListTitle extends React.Component<OwnPropsType, StateType> {\r\n\r\n    state: StateType = {\r\n        editMode: false,\r\n        title: ''\r\n    }\r\n    onDelete = () => {\r\n        this.props.deleteTodolist(this.props.todolistId)\r\n    }\r\n    activateEditMode = () => {\r\n        this.setState({editMode: true});\r\n    }\r\n\r\n    deactivateEditMode = () => {\r\n        this.setState({editMode: false});\r\n        this.props.updateTodolist(this.state.title);\r\n    }\r\n\r\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({title: e.currentTarget.value})\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <div className=\"todoList-header\">\r\n                <span className=\"todoList-header-title\">\r\n                    {this.state.editMode\r\n                        ? <input onBlur={this.deactivateEditMode} onChange={this.onTitleChanged} autoFocus={true}\r\n                                 defaultValue={this.props.title}/>\r\n                        : <span onClick={this.activateEditMode}>{this.props.title}</span>\r\n                    }\r\n                </span>\r\n                <Button type={'primary'} small={true} onClick={this.onDelete} btnName={this.props.name}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoListTitle;","import React, {ChangeEvent, KeyboardEvent} from \"react\";\r\nimport '../TodoList.css'\r\nimport Button from \"../common/Button/Button\";\r\n\r\ntype OwnPropsType = {\r\n    addItem: (newText: string) => void,\r\n    placeholder: string,\r\n    btnName: string\r\n}\r\n\r\ntype StateType = {\r\n    error: boolean\r\n    title: string\r\n}\r\n\r\nclass AddNewItemForm extends React.Component<OwnPropsType, StateType> {\r\n    state: StateType = {\r\n        error: false,\r\n        title: ''\r\n    }\r\n\r\n    onAddItemClick = () => {\r\n        let newText = this.state.title;\r\n        if (newText.trim() === \"\") {\r\n            this.setState({error: true})\r\n        } else {\r\n            this.props.addItem(newText);\r\n            this.setState({\r\n                error: false,\r\n                title: ''\r\n            });\r\n        }\r\n    };\r\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            error: false,\r\n            title: e.currentTarget.value\r\n        })\r\n    }\r\n    onKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            this.onAddItemClick();\r\n        }\r\n    }\r\n\r\n    render = () => {\r\n        let classNameForInput = (this.state.error) ? 'error' : '';\r\n        return (\r\n            <div className=\"item-form\">\r\n                <input\r\n                    type=\"text\" placeholder={this.props.placeholder}\r\n                    className={`${classNameForInput} + input-form`}\r\n                    onChange={this.onTitleChanged}\r\n                    onKeyPress={this.onKeyPress}\r\n                    value={this.state.title}\r\n                />\r\n                <Button type={'primary'} small={true} onClick={this.onAddItemClick} btnName={this.props.btnName}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddNewItemForm;","import axios from \"axios\";\r\nimport {TaskType, TodoType} from \"../types/entities\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://social-network.samuraijs.com/api/1.1/todo-lists\",\r\n  withCredentials: true,\r\n  headers: {\"API-KEY\": \"eec707e4-21e7-4972-ae6a-c9f0a894d660\"}\r\n})\r\n\r\n/*resultCode: 0\r\nmessages: [],\r\n    data: {\r\n    item:   {\r\n        \"id\": \"a2dfe62b-ebce-4b37-9581-1cc77ebc999f\",\r\n            \"title\": \"important\",\r\n            \"addedDate\": \"2019-07-30T12:23:49.677\",\r\n            \"order\": 0*/\r\n\r\ntype CommonApiType<T> = {\r\n    resultCode: 0| 1 | 100\r\n    messages: Array<string>\r\n    data: T\r\n}\r\n\r\n/*type CreateTodoType = {\r\n    resultCode: 0| 1 | 100\r\n    messages: Array<string>\r\n    data: {\r\n        item: TodoType\r\n    }\r\n}\r\n\r\ntype ResponseTaskType2 = {\r\n    resultCode: 0 | 1 | 100\r\n    messages: Array<string>\r\n    data: {\r\n        item: TaskType\r\n    }\r\n}\r\ntype ResponseTaskType3 = {\r\n    resultCode: 0 | 1 | 100\r\n    messages: Array<string>\r\n    data: {}\r\n}*/\r\n\r\nexport const api = {\r\n\r\n  createTodolist(title: string) {\r\n    // debugger;\r\n    return instance.post<CommonApiType<{item: TodoType}>>(\"\",{title: title})\r\n      .then(res => res.data);\r\n  },\r\n  updateTitleTodolist(title: string, todolistId: string) {\r\n    // debugger;\r\n    return instance.put(`/${todolistId}/`,{title: title})\r\n      .then(res => res.data);\r\n  },\r\n  getTodolist() {\r\n    return instance.get(\"\" )\r\n      .then(res => res.data)\r\n  },\r\n  getTasks(todolistId: string) {\r\n      // debugger\r\n    return instance.get(`/${todolistId}/tasks`)\r\n      .then(res => res.data)\r\n  },\r\n  deleteTodolist(todolistId: string) {\r\n    // debugger;\r\n    return instance.delete(`/${todolistId}`)\r\n      .then(res => res.data)\r\n  },\r\n  createTask(newText: string, todolistId: string) {\r\n    // debugger;\r\n    return instance.post<CommonApiType<{item: TaskType}>>(`/${todolistId}/tasks`,{title: newText});\r\n  },\r\n  updateTask(taskId: string, todolistId: string, task: TaskType) {\r\n    return instance.put<CommonApiType<{item: TaskType }>>(`/${todolistId}/tasks/${taskId}`, task);\r\n  },\r\n  deleteTask(taskId: string, todolistId: string) {\r\n    return instance.delete<CommonApiType<{ }>>(`/${todolistId}/tasks/${taskId}`);\r\n  }\r\n}","import {api} from \"./api/api\";\r\nimport {TaskType, TodoType, TodoUpdateObject} from \"./types/entities\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppStateType} from \"./store\";\r\n\r\nexport const CREATE_TODOLIST = 'TodoApp/TodoList/CREATE_TODOLIST';\r\nexport const ADD_TASK = 'TodoApp/TodoList/ADD_TASK';\r\nexport const UPDATE_TASK = 'TodoApp/TodoList/UPDATE_TASK';\r\nexport const DELETE_TODOLIST = 'TodoApp/TodoList/DELETE_TODOLIST';\r\nexport const DELETE_TASK = 'TodoApp/TodoList/DELETE_TASK';\r\nexport const SET_TODOLIST = \"TodoList/Reducer/SET_TODOLIST\";\r\nexport const SET_TODOLIST_ERROR = \"TodoList/Reducer/SET_TODOLIST_ERROR\";\r\nexport const SET_TASKS = \"TodoList/Reducer/SET_TASKS\";\r\nexport const UPDATE_TITLE_TODOLIST = \"TodoList/Reducer/UPDATE_TITLE_TODOLIST\";\r\nexport const LOADING_TODO = \"TodoList/Reducer/LOADING_TODO\";\r\nexport const LOADING_TASKS = \"TodoList/Reducer/LOADING_TASKS\";\r\n\r\ntype initialStateType = {\r\n    todolists: Array<TodoType>\r\n    loadingTodo: boolean,\r\n    loadingTasks: boolean,\r\n}\r\n\r\nconst initialState: initialStateType = {\r\n    todolists: [],\r\n    loadingTodo: false,\r\n    loadingTasks: false\r\n}\r\nconst todolistReducer = (state: initialStateType = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case SET_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists\r\n            }\r\n        case CREATE_TODOLIST:\r\n            return {...state, todolists: [action.newTodolist, ...state.todolists]};\r\n        case UPDATE_TITLE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id !== action.todolistId) {\r\n                        return tl\r\n                    } else {\r\n                        return {\r\n                            ...tl,\r\n                            title: action.title\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id !== action.todolistId) return tl;\r\n                    else {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: action.tasks\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: [...tl.tasks, action.newTask]}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        case UPDATE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.map(t => {\r\n                                if (t.id !== action.taskId) {\r\n                                    return t;\r\n                                } else {\r\n                                    return {...t, ...action.obj};\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        case DELETE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(tl => tl.id !== action.todolistId)\r\n            }\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.filter(t => t.id !== action.taskId)\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        case LOADING_TODO:\r\n            return {\r\n                ...state, loadingTodo: action.isActive\r\n            }\r\n        case LOADING_TASKS:\r\n            return {\r\n                ...state, loadingTasks: action.isActive\r\n            }\r\n        /*case SET_TODOLIST_ERROR:\r\n            return {\r\n                ...state, //error: 'error'\r\n            }*/\r\n    }\r\n    return state\r\n}\r\n\r\nexport default todolistReducer;\r\n\r\ntype ActionsType =\r\n    UpdateTaskSuccessActionType\r\n    | DeleteTodoSuccessActionType\r\n    | DeleteTaskSuccessActionType\r\n    | UpdateTodolistTitleSuccessActionType\r\n    | AddTaskSuccessActionType\r\n    | GetTasksSuccessActionType\r\n    | AddTodolistSuccessActionType\r\n    | GetTodolistsSuccessActionType\r\n    | LoadingTodoActionType\r\n    | LoadingTasksActionType\r\n\r\n\r\ntype UpdateTaskSuccessActionType = {\r\n    type: typeof UPDATE_TASK\r\n    taskId: string\r\n    obj: TodoUpdateObject\r\n    todolistId: string\r\n}\r\ntype DeleteTodoSuccessActionType = {\r\n    type: typeof DELETE_TODOLIST\r\n    todolistId: string\r\n}\r\ntype DeleteTaskSuccessActionType = {\r\n    type: typeof DELETE_TASK\r\n    taskId: string\r\n    todolistId: string\r\n}\r\ntype UpdateTodolistTitleSuccessActionType = {\r\n    type: typeof UPDATE_TITLE_TODOLIST\r\n    todolistId: string\r\n    title: string\r\n}\r\ntype AddTaskSuccessActionType = {\r\n    type: typeof ADD_TASK\r\n    newTask: TaskType\r\n    todolistId: string\r\n}\r\ntype GetTasksSuccessActionType = {\r\n    type: typeof SET_TASKS\r\n    tasks: Array<TaskType>\r\n    todolistId: string\r\n}\r\ntype AddTodolistSuccessActionType = {\r\n    type: typeof CREATE_TODOLIST\r\n    newTodolist: TodoType\r\n}\r\ntype GetTodolistsSuccessActionType = {\r\n    type: typeof SET_TODOLIST\r\n    todolists: Array<TodoType>\r\n}\r\ntype LoadingTodoActionType = {\r\n    type: typeof LOADING_TODO\r\n    isActive: boolean\r\n}\r\ntype LoadingTasksActionType = {\r\n    type: typeof LOADING_TASKS\r\n    isActive: boolean\r\n}\r\n\r\n// Action creator\r\n\r\nexport const addTodolistAC = (todolist: TodoType): AddTodolistSuccessActionType => {\r\n    return {type: CREATE_TODOLIST, newTodolist: todolist}\r\n}\r\nexport const updateTodolistAC = (title: string, todolistId: string): UpdateTodolistTitleSuccessActionType => {\r\n    return {type: UPDATE_TITLE_TODOLIST, title, todolistId}\r\n}\r\nexport const addTaskAC = (newTask: TaskType, todolistId: string): AddTaskSuccessActionType => {\r\n    return {type: ADD_TASK, newTask, todolistId};\r\n}\r\nexport const deleteTaskAC = (taskId: string, todolistId: string): DeleteTaskSuccessActionType => {\r\n    return {type: DELETE_TASK, taskId, todolistId};\r\n}\r\nexport const deleteTodolistAC = (todolistId: string): DeleteTodoSuccessActionType => {\r\n    return {type: DELETE_TODOLIST, todolistId}\r\n}\r\n/*export const setTodolistError = (todolists: Array<TodoType>) => {\r\n    return {type: SET_TODOLIST_ERROR}\r\n}*/\r\nexport const updateTaskAC = (taskId: string, todolistId: string, obj: TodoUpdateObject): UpdateTaskSuccessActionType => ({\r\n    type: UPDATE_TASK,\r\n    taskId,\r\n    todolistId,\r\n    obj\r\n});\r\nexport const loadingTodoAC = (isActive: boolean): LoadingTodoActionType => ({type: LOADING_TODO, isActive});\r\nexport const loadingTasksAC = (isActive: boolean): LoadingTasksActionType => ({type: LOADING_TASKS, isActive});\r\nexport const setTodolistAC = (todolists: Array<TodoType>): GetTodolistsSuccessActionType => {\r\n    return {type: SET_TODOLIST, todolists: todolists}\r\n}\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string): GetTasksSuccessActionType => {\r\n    return {type: SET_TASKS, tasks, todolistId}\r\n}\r\n\r\n// THUNK\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionsType>;\r\ntype ThunkDispatch1 = ThunkDispatch<AppStateType, unknown, ActionsType>;\r\n\r\nexport const setTaskTC = (todolistId: string): ThunkType => (dispatch: ThunkDispatch1) => {\r\n    dispatch(loadingTasksAC(true));\r\n    api.getTasks(todolistId)\r\n        .then(res => {\r\n            dispatch(setTasksAC(res.items, todolistId));\r\n            dispatch(loadingTasksAC(false));\r\n        });\r\n}\r\nexport const deleteTodolistTC = (todolistId: string) => (dispatch: ThunkDispatch1) => {\r\n    api.deleteTodolist(todolistId)\r\n        .then(res => {\r\n            dispatch(deleteTodolistAC(todolistId));\r\n        });\r\n}\r\nexport const updateTodolistTC = (title: string, todolistId: string) => (dispatch: ThunkDispatch1) => {\r\n    api.updateTitleTodolist(title, todolistId)\r\n        .then(res => {\r\n            if (res.resultCode === 0) {\r\n                dispatch(updateTodolistAC(title, todolistId))\r\n            }\r\n        })\r\n}\r\nexport const addTaskTC = (newText: string, todolistId: string) => (dispatch: ThunkDispatch1) => {\r\n    api.createTask(newText, todolistId)\r\n        .then(res => {\r\n            dispatch(addTaskAC(res.data.data.item, todolistId));\r\n        });\r\n}\r\nexport const updateTaskTC = (taskId: string, todolistId: string, task: TaskType) => (dispatch: ThunkDispatch1) => {\r\n    api.updateTask(taskId, todolistId, task)\r\n        .then(res => {\r\n            dispatch(updateTaskAC(taskId, todolistId, task));\r\n        });\r\n}\r\nexport const deleteTaskTC = (taskId: string, todolistId: string) => (dispatch: ThunkDispatch1) => {\r\n    api.deleteTask(taskId, todolistId)\r\n        .then(res => {\r\n            dispatch(deleteTaskAC(taskId, todolistId));\r\n        });\r\n}\r\nexport const setTodolistsTC = (): ThunkType => (dispatch: ThunkDispatch1) => {\r\n    dispatch(loadingTodoAC(true))\r\n    api.getTodolist()\r\n        .then(res => {\r\n            dispatch(setTodolistAC(res));\r\n            dispatch(loadingTodoAC(false));\r\n        })\r\n    /*.catch((error) => {\r\n        dispatch(setTodolistError())\r\n    })*/\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: ThunkDispatch1) => {\r\n    api.createTodolist(title)\r\n        .then(res => {\r\n            let todolist = res.data.item;\r\n            dispatch(addTodolistAC(todolist));\r\n        });\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport TodoListTasks from './TodoListTasks/TodoListTasks';\r\nimport TodoListFooter from './TodoListFooter/TodoListFooter';\r\nimport TodoListTitle from \"./TodoListHeader/TodoListTitle\";\r\nimport AddNewItemForm from \"./TodoListHeader/AddNewItemForm\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    addTaskTC,\r\n    deleteTaskTC,\r\n    deleteTodolistTC,\r\n    setTaskTC, updateTaskTC,\r\n    updateTodolistTC\r\n} from \"./todolistReducer\";\r\nimport {TaskType, TodoUpdateObject} from \"./types/entities\";\r\nimport {AppStateType} from \"./store\";\r\n\r\ntype StateType = {\r\n    filterValue: string\r\n}\r\n\r\ntype OwnPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    loadingTasks: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setTaskTC: (todolistId: string) => void\r\n    deleteTodolistTC: (todolistId: string) => void\r\n    updateTodolistTC: (title: string, todolistId: string) => void\r\n    addTaskTC: (newText: string, todolistId: string) => void\r\n    updateTaskTC: (taskId: string, todolistId: string, task: TaskType) => void\r\n    deleteTaskTC: (taskId: string, todolistId: string) => void\r\n}\r\n\r\nclass TodoList extends React.Component<OwnPropsType & MapDispatchPropsType, StateType> {\r\n\r\n    state: StateType = {\r\n        filterValue: \"All\"\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.props.setTaskTC(this.props.id);\r\n    }\r\n\r\n    deleteTodolist = () => {\r\n        this.props.deleteTodolistTC(this.props.id);\r\n    };\r\n\r\n    updateTodolist = (title: string) => {\r\n        this.props.updateTodolistTC(title, this.props.id)\r\n    }\r\n\r\n    addTask = (newText: string) => {\r\n        this.props.addTaskTC(newText, this.props.id)\r\n    }\r\n\r\n    changeFilter = (newFilterValue: string) => {\r\n        this.setState({filterValue: newFilterValue});\r\n    };\r\n\r\n    changeTask = (taskId: string, obj: TodoUpdateObject) => {\r\n        let changedTask = this.props.tasks.find(task => {\r\n            return task.id === taskId\r\n        });\r\n\r\n        if (changedTask) {\r\n            let task = {...changedTask, ...obj};\r\n            this.props.updateTaskTC(taskId, this.props.id, task)\r\n        }\r\n    };\r\n\r\n    changeStatus = (task: string, status: number) => {\r\n        this.changeTask(task, {status});\r\n    }\r\n\r\n    changeTitle = (task: string, title: string) => {\r\n        this.changeTask(task, {title: title});\r\n    }\r\n\r\n    changePriority = (task: string, priority: number) => {\r\n        this.changeTask(task, {priority: priority})\r\n}\r\n\r\n    deleteTask = (taskId: string) => {\r\n        this.props.deleteTaskTC(taskId, this.props.id)\r\n    }\r\n\r\n    render = () => {\r\n        let {tasks = []} = this.props;\r\n        let tasksFilter = tasks.filter(t => {\r\n            switch (this.state.filterValue) {\r\n                case \"Active\":\r\n                    return t.status !== 2;\r\n                case \"Completed\":\r\n                    return t.status === 2;\r\n                default:\r\n                    return true;\r\n            }\r\n        });\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"todoList\">\r\n                        <TodoListTitle name={'Delete'}\r\n                                       title={this.props.title}\r\n                                       todolistId={this.props.id}\r\n                                       deleteTodolist={this.deleteTodolist}\r\n                                       updateTodolist={this.updateTodolist}/>\r\n                        <AddNewItemForm addItem={this.addTask} placeholder={'Create task'} btnName={'Create'}/>\r\n                    <TodoListTasks\r\n                        changeStatus={this.changeStatus}\r\n                        changeTitle={this.changeTitle}\r\n                        changePriority={this.changePriority}\r\n                        tasks={tasksFilter}\r\n                        deleteTask={this.deleteTask}\r\n                        loadingTasks={this.props.loadingTasks}\r\n                    />\r\n                    <TodoListFooter filterValue={this.state.filterValue} changeFilter={this.changeFilter}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst ConnectedTodoList = connect<{}, MapDispatchPropsType, OwnPropsType, AppStateType>(null, {\r\n    setTaskTC,\r\n    deleteTodolistTC,\r\n    updateTodolistTC,\r\n    addTaskTC,\r\n    updateTaskTC,\r\n    deleteTaskTC\r\n})(TodoList);\r\n\r\nexport default ConnectedTodoList;\r\n\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./TodoList\";\r\nimport AddNewItemForm from \"./TodoListHeader/AddNewItemForm\";\r\nimport {connect} from \"react-redux\";\r\nimport {addTodolistTC, setTodolistsTC} from \"./todolistReducer\";\r\nimport {AppStateType} from \"./store\";\r\nimport {TodoType} from \"./types/entities\";\r\n\r\ntype MapStatePropsType = {\r\n    todolists: Array<TodoType>\r\n    loadingTodo: boolean\r\n    loadingTasks: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setTodolistsTC: () => void;\r\n    addTodolistTC: (title: string) => void;\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nclass App extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        this.restoreState();\r\n    };\r\n\r\n    addTodoList = (title: string) => {\r\n        this.props.addTodolistTC(title);\r\n    };\r\n\r\n    restoreState = () => {\r\n        this.props.setTodolistsTC();\r\n    }\r\n\r\n    render = () => {\r\n        const todolist = this.props.todolists.map(tl =>\r\n            <TodoList key={tl.id}\r\n                      id={tl.id}\r\n                      title={tl.title}\r\n                      tasks={tl.tasks}\r\n                      loadingTasks={this.props.loadingTasks}\r\n            />)\r\n        return (\r\n            <div>\r\n                <>\r\n                    <AddNewItemForm addItem={this.addTodoList} placeholder={'Create a new task list'}\r\n                                    btnName={'Create'}/>\r\n                </>\r\n                <div className=\"App\">\r\n                    {this.props.loadingTodo ? <span>Loading...</span> : todolist}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        todolists: state.todolist.todolists,\r\n        loadingTodo: state.todolist.loadingTodo,\r\n        loadingTasks: state.todolist.loadingTasks\r\n    }\r\n}\r\n\r\nconst ConnectedApp = connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n    setTodolistsTC,\r\n    addTodolistTC\r\n})(App);\r\nexport default ConnectedApp;\r\n\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport todolistReducer from \"./todolistReducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\n\r\nlet rootReducer = combineReducers({\r\n    todolist: todolistReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}